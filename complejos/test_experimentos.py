# -*- coding: utf-8 -*-
"""
Created on Wed Oct  2 08:53:53 2019

@author: 2155180
"""

import unittest
import experimentos as ex


class Test_experimentos(unittest.TestCase):
    def test_canicas(self):
         M = [[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0]], 
              [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0]], 
              [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0]], 
              [[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], 
              [[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], 
              [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], 
              [[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0]], 
              [[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], 
              [[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], 
              [[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], 
              [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0]], 
              [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0]], 
              [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]]
         M = [[ tuple(par) for par in fila] for fila in M]
         V = [(10,0), (4,0), (1,0), (7,0), (2,0), (2,0), (11,0), (0,0), (3,0), (1,0), (0,0), (5,0), (2,0)]
         esperado = [(0.0, 0.0),(0.0, 0.0),(1.0, 0.0),(7.0, 0.0),(2.0, 0.0),(21.0, 0.0),(5.0, 0.0),(0.0, 0.0),(4.0, 0.0),(0.0, 0.0),(3.0, 0.0), (5.0, 0.0),(0.0, 0.0)]
          
         self.assertEquals(ex.dinamica_del_sistema(M, V, 25), esperado)
    
    def test_emsamblar_sistemas(self):
        MA = [[(0, 0), (0.2, 0), (0.3, 0), (0.5, 0)],
              [(0.3, 0), (0.2, 0), (0.1, 0), (0.4, 0)],
              [(0.4, 0), (0.3, 0), (0.2, 0), (0.1, 0)],
              [(0.3, 0), (0.3, 0), (0.4, 0), (0, 0)]]
        VA = [(0.2, 0), (0.1, 0), (0.6, 0), (0.1, 0)]
        MB = [[(0, 0), (0.16666666666666666, 0), (0.8333333333333334, 0)],
               [(0.3333333333333333, 0), (0.5, 0), (0.16666666666666666, 0)],
               [(0.6666666666666666, 0), (0.3333333333333333, 0), (0, 0)]]
        VB = [(0.7, 0), (0.15, 0), (0.15, 0)]
        esperado = [(0.06854114583333333, 0.0),
                    (0.08497952546296297, 0.0),
                    (0.09477932870370372, 0.0),
                    (0.06920364583333334, 0.0),
                    (0.08580091435185187, 0.0),
                    (0.09569543981481482, 0.0),
                    (0.06930522916666668, 0.0),
                    (0.08592686064814815, 0.0),
                    (0.0958359101851852, 0.0),
                    (0.06899164583333334, 0.0),
                    (0.08553806990740741, 0.0),
                    (0.09540228425925927, 0.0)]
        
        self.assertEquals(ex.ensamblar_sistemas(MA, VA, MB, VB, 5), esperado)
        

if __name__ == "__main__":
    unittest.main()
